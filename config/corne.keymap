#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define SYSTEM 1
#define BLUETOOTH 2
#define APPS 3
#define SYMBOLS 4
#define NUMBERS 5
#define NUMPAD 6
#define F1_F12 7

// home row
#define HR1 LCTRL
#define HR2 LSHFT
#define HR3 RALT
#define HR4 LCTRL

#define MV_TB_L LC(LS(PG_UP))
#define MV_TB_R LC(LS(PG_DN))
#define PREV_TAB LC(LS(TAB))
#define NEXT_TAB LC(TAB)

#define PREV_SPACE LA(P)
#define NEXT_SPACE LA(N)


#define MAKE_TAP_SHIFT(name, tap, shift) \
    name: name { \
        compatible = "zmk,behavior-mod-morph"; \
        label = #name; \
        #binding-cells = <0>; \
        bindings = <&kp tap>, <&kp shift>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    };


// fixes "system layer not activating" perceived bug
//
// > triggers the hold behavior when the tapping-term-ms has expired or another key is pressed
// > â€” https://zmk.dev/docs/behaviors/hold-tap#flavors
&lt {
    flavor = "hold-preferred";
};

// fixes "alt instead of apostrophe" bug
&mt {
    flavor = "tap-preferred";
};


/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };

    macros {
        // hold to enable apps layer and left command at the same time
        apps_and_lcmd: apps_and_lcmd {
            label = "apps_and_lcmd";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &mo APPS &kp LCMD>
                , <&macro_pause_for_release>
                , <&macro_release &mo APPS &kp LCMD>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <30>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <30>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
        combo_bksp {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp BKSP>;
        };
        combo_enter {
            timeout-ms = <30>;
            key-positions = <17 18>;
            bindings = <&kp ENT>;
        };
    };

    behaviors {
        // https://zmk.dev/docs/behaviors/hold-tap#option-3-balanced
        bhm: sticky_balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&sk>, <&kp>;
        };

        // `&lt` using `&apps_and_lcmd` and `&ts_spc_bs`
        // parameters are not used, so you can pass anything, e.g. 0 0
        MAKE_TAP_SHIFT(ts_spc_bs, SPACE, BACKSPACE)
        spc_bs_apps: spc_bs_apps {
            compatible = "zmk,behavior-hold-tap";
            label = "spc_bs_apps";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&apps_and_lcmd>, <&ts_spc_bs>;
        };

        // tap, alt+tap, hold
        esc_tab_numbers: esc_tab_numbers {
            compatible = "zmk,behavior-mod-morph";
            label = "esc_tab_numbers";
            #binding-cells = <0>;
            bindings = <&lt NUMBERS ESC>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        // apps layer also holds down CMD, so I use a mod-morph to escape it
        prev_space: prev_space {
            compatible = "zmk,behavior-mod-morph";
            label = "prev_space";
            #binding-cells = <0>;
            bindings = <&kp PREV_SPACE>, <&kp PREV_SPACE>;
            mods = <(MOD_LGUI)>;
        };
        next_space: next_space {
            compatible = "zmk,behavior-mod-morph";
            label = "next_space";
            #binding-cells = <0>;
            bindings = <&kp NEXT_SPACE>, <&kp NEXT_SPACE>;
            mods = <(MOD_LGUI)>;
        };

        // tap, shift+tap, hold
        bs_del_shift: bs_del_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "bs_del_shift";
            #binding-cells = <0>;
            bindings = <&mt LSHIFT BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // alt+d = alt+x
        alt_d: alt_d {
            compatible = "zmk,behavior-mod-morph";
            label = "alt_d";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp RA(X)>;
            mods = <(MOD_RALT)>;
        };

        // interpunction
        MAKE_TAP_SHIFT(ts_dot, DOT, QUESTION)
        MAKE_TAP_SHIFT(ts_comma, COMMA, EXCLAMATION)
        MAKE_TAP_SHIFT(ts_colon, COLON, SEMICOLON)

        // other
        MAKE_TAP_SHIFT(ts_slash, SLASH, BACKSLASH)
    };

    keymap {
        compatible = "zmk,keymap";
        label = "Base";
        default_layer {
            bindings = <
&kp Q &kp      W &kp      E &kp      R &kp T          &kp Y &kp      U &kp      I &kp      O &kp P
&mt HR1 A &kp  S &kp      D &kp      F &kp G          &kp H &kp      J &kp      K &kp      L &mt HR1 SEMI 
&mt HR2 Z &kp  X &kp      C &kp      V &kp B          &kp N &kp      M &kp  COMMA &kp    DOT &kp FSLH
                 &kp LGUI  &kp LALT   &mo 1           &kp SPACE  &mo 2   &mo 3 
            >;
        };
        lower_layer {
        label = "Sym/Num";
        bindings = <
                &kp ESC   &kp N7 &kp N8 &kp N9 &trans   &trans &kp MINUS &kp EQUAL  &kp TILDE  &kp GRAVE
                &kp LCTRL &kp N4 &kp N5 &kp N6 &trans   &trans &kp LBKT  &kp RBKT   &kp BSLH   &kp SQT
                &kp LSHFT &kp N1 &kp N2 &kp N3 &kp N0   &trans &kp LPAR  &kp RPAR   &trans     &trans
                &trans &trans &trans   &trans &trans &trans
                >;
        };
        nav_layer {
        label = "Nav";
        bindings = <
                &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR
                &kp C_VOL_DN  &kp C_VOL_UP &trans   &trans   &trans                   &kp LC(LS(PG_UP)) &kp LC(LS(TAB)) &kp LC(TAB) &kp LC(LS(PG_DN)) &kp BSLH
                &kp LSHFT     &kp LA(N1)   &kp LA(N2) &kp LA(N3)   &kp LA(N4)         &kp LA(N) &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE 
                &trans &trans &trans   &trans &trans &trans
                >;
        };

        bluetooth_layer {
            bindings = <
&none &none &none       &none &none    &none        &none        &none        &none        &none
&none &none &none       &none &none    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
&none &none &none       &none &none    &none        &none        &none        &none        &none
            &bootloader &none &none    &bt BT_CLR   &none        &bootloader
            >;
        };

        none_layer {
            bindings = <
&none &none &none &none &none    &none &none &none &none &none
&none &none &none &none &none    &none &none &none &none &none
&none &none &none &none &none    &none &none &none &none &none
            &none &none &none    &none &none &none
            >;
        };
    };
};
